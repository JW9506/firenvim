/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!******************************!*\
  !*** ./src/browserAction.ts ***!
  \******************************/

function displayMessages(func, id) {
    function insertMessage(msg) {
        document.getElementById(id).innerText = msg;
    }
    return browser.runtime.sendMessage({ funcName: [func] })
        .then(insertMessage)
        .catch(insertMessage);
}
function displayErrorsAndWarnings() {
    return Promise.all([displayMessages("getWarning", "warnings"), displayMessages("getError", "errors")]);
}
async function updateDisableButton() {
    const tabId = (await browser.runtime.sendMessage({
        args: {
            args: [{ active: true, currentWindow: true }],
            funcName: ["browser", "tabs", "query"],
        },
        funcName: ["exec"],
    }))[0].id;
    const disabled = (await browser.runtime.sendMessage({
        args: [tabId, "disabled"],
        funcName: ["getTabValueFor"],
    }));
    const button = document.getElementById("disableFirenvim");
    if (disabled === true) {
        button.innerText = "Enable in this tab";
    }
    else {
        button.innerText = "Disable in this tab";
    }
}
addEventListener("DOMContentLoaded", () => {
    document.getElementById("reloadSettings").addEventListener("click", () => {
        browser.runtime.sendMessage({ funcName: ["updateSettings"] })
            .then(displayErrorsAndWarnings)
            .catch(displayErrorsAndWarnings);
    });
    document.getElementById("disableFirenvim").addEventListener("click", () => {
        browser.runtime.sendMessage({ funcName: ["toggleDisabled"] })
            .then(updateDisableButton);
    });
    document.getElementById("troubleshooting").addEventListener("click", () => {
        browser.runtime.sendMessage({ funcName: ["openTroubleshootingGuide"] });
    });
    displayErrorsAndWarnings();
    updateDisableButton();
});

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxDQUFDO0lBQzNCLG1CQUFtQixFQUFFLENBQUM7QUFDMUIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9GaXJlbnZpbS8uL3NyYy9icm93c2VyQWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZnVuY3Rpb24gZGlzcGxheU1lc3NhZ2VzKGZ1bmM6IFwiZ2V0RXJyb3JcIiB8IFwiZ2V0V2FybmluZ1wiLCBpZDogXCJlcnJvcnNcIiB8IFwid2FybmluZ3NcIikge1xuICAgIGZ1bmN0aW9uIGluc2VydE1lc3NhZ2UobXNnOiBhbnkpIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLmlubmVyVGV4dCA9IG1zZztcbiAgICB9XG4gICAgcmV0dXJuIGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7IGZ1bmNOYW1lOiBbZnVuY10gfSlcbiAgICAgICAgLnRoZW4oaW5zZXJ0TWVzc2FnZSlcbiAgICAgICAgLmNhdGNoKGluc2VydE1lc3NhZ2UpO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5RXJyb3JzQW5kV2FybmluZ3MoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFtkaXNwbGF5TWVzc2FnZXMoXCJnZXRXYXJuaW5nXCIsIFwid2FybmluZ3NcIiksIGRpc3BsYXlNZXNzYWdlcyhcImdldEVycm9yXCIsIFwiZXJyb3JzXCIpXSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZURpc2FibGVCdXR0b24oKSB7XG4gICAgY29uc3QgdGFiSWQgPSAoYXdhaXQgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgYXJnczoge1xuICAgICAgICAgICAgYXJnczogW3sgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH1dLFxuICAgICAgICAgICAgZnVuY05hbWU6IFsgXCJicm93c2VyXCIsIFwidGFic1wiLCBcInF1ZXJ5XCIgXSxcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY05hbWU6IFtcImV4ZWNcIl0sXG4gICAgfSkpWzBdLmlkO1xuICAgIGNvbnN0IGRpc2FibGVkID0gKGF3YWl0IGJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgIGFyZ3M6IFt0YWJJZCwgXCJkaXNhYmxlZFwiXSxcbiAgICAgICAgZnVuY05hbWU6IFtcImdldFRhYlZhbHVlRm9yXCJdLFxuICAgIH0pKTtcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpc2FibGVGaXJlbnZpbVwiKTtcbiAgICBpZiAoZGlzYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IFwiRW5hYmxlIGluIHRoaXMgdGFiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9IFwiRGlzYWJsZSBpbiB0aGlzIHRhYlwiO1xuICAgIH1cbn1cblxuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVsb2FkU2V0dGluZ3NcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKCB7IGZ1bmNOYW1lOiBbXCJ1cGRhdGVTZXR0aW5nc1wiXSB9KVxuICAgICAgICAgICAgLnRoZW4oZGlzcGxheUVycm9yc0FuZFdhcm5pbmdzKVxuICAgICAgICAgICAgLmNhdGNoKGRpc3BsYXlFcnJvcnNBbmRXYXJuaW5ncyk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkaXNhYmxlRmlyZW52aW1cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKCB7IGZ1bmNOYW1lOiBbXCJ0b2dnbGVEaXNhYmxlZFwiXSB9KVxuICAgICAgICAgICAgLnRoZW4odXBkYXRlRGlzYWJsZUJ1dHRvbik7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0cm91Ymxlc2hvb3RpbmdcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgYnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKCB7IGZ1bmNOYW1lOiBbXCJvcGVuVHJvdWJsZXNob290aW5nR3VpZGVcIl0gfSk7XG4gICAgfSlcbiAgICBkaXNwbGF5RXJyb3JzQW5kV2FybmluZ3MoKTtcbiAgICB1cGRhdGVEaXNhYmxlQnV0dG9uKCk7XG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==